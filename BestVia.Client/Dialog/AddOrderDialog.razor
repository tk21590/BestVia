@page "/dialogAddOrder/{productId}"
@inject IUserServicesClient _userServices;
@inject IProductServicesClient _productServices;
@inject IOrderServicesClient _orderServices;
@inject IProductTypeServicesClient _ptypeServices;
@inject AuthenticationStateProvider _authenProvider

@inject NotificationService _noti;
@inject DialogService _dialog
@attribute [Authorize]


<div class="row">
    <div class="col-12">
        <div class="row m-3">
            <RadzenText class="text-danger font-weight-bold" Text="@textHeader" TextAlign="TextAlign.Center" TextStyle="TextStyle.Body2" />

        </div>
        <div class="row m-3">
            <div class="col-lg-6">
                <RadzenFormField Text="Chọn số lượng cần mua" Style="width: 100%;" Variant="Variant.Text">
                    <RadzenNumeric TValue="int" @bind-Value="@order.Quantity" Max="@product.Stock" Format="###,#"  Style="width: 100%;" />
                </RadzenFormField>
            </div>
            <div class="col-lg-6">
                <RadzenText class="text-primary" Text="Tổng tiền đơn hàng" TextAlign="TextAlign.Left" TextStyle="TextStyle.Caption" />
                <RadzenText class="text-danger" Text="@(Helper.Money_ConvertToString(order.Quantity * product.Price))" TextAlign="TextAlign.Left" TextStyle="TextStyle.H6" />
            </div>
        </div>
        @if (isBox)
        {
            <div class="row m-3">
                <div class="col-lg-6 col-sm-12">
                    <RadzenFormField Text="Tên khách hàng" Style="width: 100%;" Variant="Variant.Text">
                        <RadzenTextBox @bind-Value="@order.User" Style="width: 100%;" />
                    </RadzenFormField>
                </div>
                <div class="col-lg-6 col-sm-12">
                    <RadzenFormField Text="Số điện thoại" Style="width: 100%;" Variant="Variant.Text">
                        <RadzenTextBox @bind-Value="@order.Phone" Style="width: 100%;" />
                    </RadzenFormField>
                </div>
                <div class="col-lg-12 mt-3">
                    <RadzenFormField Text="Địa chỉ" Style="width: 100%;" Variant="Variant.Text">
                        <RadzenTextBox @bind-Value="@order.Address" Style="width: 100%;" />
                    </RadzenFormField>
                </div>
            </div>
          
        }
        <div class="row m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" IsBusy="@isLoading" Click="@AddOrder" Text="Xác nhận" Style="width: 160px" Class="m-2" />
            <RadzenButton Click="(()=> _dialog.Close())" Icon="close" Style="width: 160px" ButtonStyle=" ButtonStyle.Light" Text="Quay lại" Class="m-2" />

        </div>

    </div>
</div>


@code {
    [Parameter]
    public string productId { get; set; }
    bool isBox;
    bool isLoading;
    Product product = new();

    Order order = new();
    string textHeader = "";
    string userId = "";
    string userName = "";

    async Task AddOrder()
    {
        if (order.Quantity > 0 && !string.IsNullOrEmpty(order.UserOrderId))
        {
            isLoading = true;
            var user = await _userServices.GetIdAsync(userId);
            isLoading = false;
            if (user != null)
            {
                if (user.Balance >= order.TotalPrice)
                {
                    var result = await _orderServices.AddAsync(order);
                    Helper.ShowNotification(_noti, result);
                }
                else
                {
                    _noti.Notify(NotificationSeverity.Error, "Lỗi :", "Số dư không đủ để thanh toán!");

                }

            }


            _dialog.Close();


        }
        else
        {
            _noti.Notify(NotificationSeverity.Error, "Lỗi :", "Sai cấu hình!");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            product = await _productServices.GetIdAsync(productId);
            if (product.ProductType.CategoryId == 4)//Box
            {
                isBox = true;
            }
            textHeader = $"Bạn đang thanh toán đơn hàng {product.Name} với giá {Helper.Money_ConvertToString(product.Price)}đ/1 . Số lượng còn lại {product.Stock}";
            var authState = await _authenProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
                userName = user.FindFirst(ClaimTypes.Name).Value;
                order = new Order
                    {
                        UserOrderId = userId,
                        ProductId = product.Id,
                        UserOrderName = userName,
                    };
            }
            StateHasChanged();

        }
    }
}

