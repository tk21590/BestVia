@page "/"
@page "/register/{ref_code?}"
@page "/login"
@page "/auth"

@layout LoginLayout
@inject IAuthServicesClient _authServices;
@inject NotificationService _noti;
@inject NavigationManager _navigate
@inject AuthenticationStateProvider _authenProvider
@inject ISessionStorageService _sessionStorageService;
@inject IJSRuntime JSRuntime

<div class="container @show" id="container">
    <div class="form-container sign-up-container">
        <EditForm Model="@registerModel" OnSubmit="AuthRegister">
            <h1>Tạo tài khoản</h1>
            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>hoặc sử dụng tài khoản của bạn</span>
            <DataAnnotationsValidator />

            <InputText type="text" placeholder="Username" id="name" @bind-Value="registerModel.Username" />
            <ValidationMessage class="text-danger font-weight-bold" style="font-size:11px" For="@(() => registerModel.Username)" />

            <InputText type="password" placeholder="Password" id="pass" @bind-Value="registerModel.Password" />
            <ValidationMessage class="text-danger font-weight-bold" style="font-size:11px" For="@(() => registerModel.Password)" />

            <InputText type="password" placeholder="Re-Password" id="repass" @bind-Value="registerModel.ConfirmPassword" />
            <ValidationMessage class="text-danger font-weight-bold" style="font-size:11px" For="@(() => registerModel.ConfirmPassword)" />

            <InputText type="text" placeholder="Mã giới thiệu (Nếu có)" id="refadd" @bind-Value="registerModel.RefAdd" />
            @if (!isLoading)
            {
                <button type="submit">
                    Đăng kí
                </button>
            }
            else
            {
                <button id="loading-btn" class="loading">
                    Đang đăng kí...
                </button>

            }

        </EditForm>
    </div>
    <div class="form-container sign-in-container">
        <EditForm Model="@loginModel" OnSubmit="AuthLogin">

            <h1>Đăng nhập</h1>
            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>hoặc sử dụng tài khoản của bạn</span>
            <DataAnnotationsValidator />
            <InputText type="text" placeholder="Username" id="name" @bind-Value="loginModel.Username" />
            <ValidationMessage class="text-danger font-weight-bold" style="font-size:11px" For="@(() => loginModel.Username)" />

            <InputText type="password" placeholder="Password" id="pass" @bind-Value="loginModel.Password" />
            <ValidationMessage class="text-danger font-weight-bold" style="font-size:11px" For="@(() => loginModel.Password)" />


            <a href="#">Quên tài khoản ?</a>
            @if (!isLoading)
            {
                <button type="submit">
                    Đăng nhập
                </button>
            }
            else
            {
                <button id="loading-btn" class="loading">
                    Đang đăng nhập...
                </button>

            }

        </EditForm>
    </div>
    <div class="overlay-container">
        <div class="overlay">
            <div class="overlay-panel overlay-left">
                <h1>Xin chào!</h1>
                <p>Nhập thông tin và đăng kí ngay tài khoản để sử dụng các dịch vụ ,nếu bạn đã có tài khoản vui lòng nhấn nút ĐĂNG NHẬP</p>
                <button class="ghost" id="signIn" @onclick="ShowOff">Đăng Nhập</button>
            </div>
            <div class="overlay-panel overlay-right">
                <h1>Chào mừng trở lại!</h1>
                <p>Để sử dụng các dịch vụ của chúng tôi , vui lòng đăng nhập tài khoản của bạn hoặc nhấn nút ĐĂNG KÍ nếu chưa có tài khoản !</p>
                <button class="ghost" id="signUp" @onclick="ShowOn">Đăng Kí</button>
            </div>
        </div>
    </div>
</div>


<style>

    @@import url('https://fonts.googleapis.com/css?family=Montserrat:400,800');

    * {
        box-sizing: border-box;
    }

    body {
        background: #f6f5f7;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-family: 'Montserrat', sans-serif;
        height: 100vh;
        margin: -20px 0 50px;
    }

    h1 {
        font-weight: bold;
        margin: 0;
    }

    h2 {
        text-align: center;
    }

    #loading-btn {
        position: relative;
        overflow: hidden;
    }

        #loading-btn:after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.5);
            z-index: 1;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }

        #loading-btn.loading:after {
            opacity: 1;
        }

        #loading-btn.loading:before {
            content: "";
            position: absolute;
            top: 50%;
            left: 10%;
            transform: translate(-50%, -50%);
            width: 2em;
            height: 2em;
            border-radius: 50%;
            border: 3px solid #fff;
            border-top-color: #000;
            animation: spin 0.6s ease-in-out infinite;
            z-index: 2;
        }

    @@keyframes spin {
        to {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    }

    p {
        font-size: 14px;
        font-weight: 100;
        line-height: 20px;
        letter-spacing: 0.5px;
        margin: 20px 0 30px;
    }

    span {
        font-size: 12px;
    }

    a {
        color: #333;
        font-size: 14px;
        text-decoration: none;
        margin: 15px 0;
    }

    button {
        border-radius: 20px;
        border: 1px solid #FF4B2B;
        background-color: #FF4B2B;
        color: #FFFFFF;
        font-size: 12px;
        font-weight: bold;
        padding: 12px 45px;
        letter-spacing: 1px;
        text-transform: uppercase;
        transition: transform 80ms ease-in;
    }

        button:active {
            transform: scale(0.95);
        }

        button:focus {
            outline: none;
        }

        button.ghost {
            background-color: transparent;
            border-color: #FFFFFF;
        }

    form {
        background-color: #FFFFFF;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        padding: 0 50px;
        height: 100%;
        text-align: center;
    }

    input {
        background-color: #eee;
        border: none;
        padding: 12px 15px;
        margin: 8px 0;
        width: 100%;
    }

    .container {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
        position: relative;
        overflow: hidden;
        width: 768px;
        max-width: 100%;
        min-height: 480px;
    }

    .form-container {
        position: absolute;
        top: 0;
        height: 100%;
        transition: all 0.6s ease-in-out;
    }

    .sign-in-container {
        left: 0;
        width: 50%;
        z-index: 2;
    }

    .container.right-panel-active .sign-in-container {
        transform: translateX(100%);
    }

    .sign-up-container {
        left: 0;
        width: 50%;
        opacity: 0;
        z-index: 1;
    }

    .container.right-panel-active .sign-up-container {
        transform: translateX(100%);
        opacity: 1;
        z-index: 5;
        animation: show 0.6s;
    }

    @@keyframes show {
        0%, 49.99% {
            opacity: 0;
            z-index: 1;
        }

        50%, 100% {
            opacity: 1;
            z-index: 5;
        }
    }

    .overlay-container {
        position: absolute;
        top: 0;
        left: 50%;
        width: 50%;
        height: 100%;
        overflow: hidden;
        transition: transform 0.6s ease-in-out;
        z-index: 100;
    }

    .container.right-panel-active .overlay-container {
        transform: translateX(-100%);
    }

    .overlay {
        background: #FF416C;
        background: -webkit-linear-gradient(to right, #FF4B2B, #FF416C);
        background: linear-gradient(to right, #FF4B2B, #FF416C);
        background-repeat: no-repeat;
        background-size: cover;
        background-position: 0 0;
        color: #FFFFFF;
        position: relative;
        left: -100%;
        height: 100%;
        width: 200%;
        transform: translateX(0);
        transition: transform 0.6s ease-in-out;
    }

    .container.right-panel-active .overlay {
        transform: translateX(50%);
    }

    .overlay-panel {
        position: absolute;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        padding: 0 40px;
        text-align: center;
        top: 0;
        height: 100%;
        width: 50%;
        transform: translateX(0);
        transition: transform 0.6s ease-in-out;
    }

    .overlay-left {
        transform: translateX(-20%);
    }

    .container.right-panel-active .overlay-left {
        transform: translateX(0);
    }

    .overlay-right {
        right: 0;
        transform: translateX(0);
    }

    .container.right-panel-active .overlay-right {
        transform: translateX(20%);
    }

    .social-container {
        margin: 20px 0;
    }

        .social-container a {
            border: 1px solid #DDDDDD;
            border-radius: 50%;
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 0 5px;
            height: 40px;
            width: 40px;
        }

    footer {
        background-color: #222;
        color: #fff;
        font-size: 14px;
        bottom: 0;
        position: fixed;
        left: 0;
        right: 0;
        text-align: center;
        z-index: 999;
    }

        footer p {
            margin: 10px 0;
        }

        footer i {
            color: red;
        }

        footer a {
            color: #3c97bf;
            text-decoration: none;
        }
</style>


@code {
    [Parameter]
    public string? ref_code { get; set; }
    string show = "";
    string login = "Đăng nhập";
    void ShowOn()
    {
        show = "right-panel-active";
    }
    void ShowOff()
    {
        show = "";
    }

    LoginModel loginModel = new();
    RegisterModel registerModel = new();

    bool isLoading = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token_old = await _sessionStorageService.GetItemAsync<string>("jwt_token");
            if (!string.IsNullOrEmpty(token_old))
            {
                await ((CustomAuthenticationStateProvider)_authenProvider).MarkUserAsAuthenticatedAsync();
                var authState = await _authenProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {

                    string role = user.FindFirst(ClaimTypes.Role).Value;
                    switch (role)
                    {
                        case "Admin":
                            _navigate.NavigateTo("/admin/products", false);
                            break;
                        case "Customer":
                            _navigate.NavigateTo("/user/orders", false);
                            break;
                        default:
                            _navigate.NavigateTo("/user/orders", false);
                            break;

                    }

                }
                //Còn token cũ

            }
            if (!string.IsNullOrEmpty(ref_code))
            {
                registerModel.RefAdd = ref_code;
                ShowOn();
            }
            StateHasChanged();
        }
    }

    async Task AuthLogin()
    {
        if (string.IsNullOrEmpty(loginModel.Username) || string.IsNullOrEmpty(loginModel.Password))
        {
            _noti.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Thông báo :", Detail = "Chưa điền đầy đủ thông tin!", Duration = 4000 });

            return;
        }

        isLoading = true;
        var respone = await _authServices.LoginAsync(loginModel);
        Helper.ShowNotification(_noti, respone);
        isLoading = false;

        if (respone.success)
        {
            string jwt_token = respone.data.ToString();

            await _sessionStorageService.SetItemAsync<string>("jwt_token", jwt_token);
            await ((CustomAuthenticationStateProvider)_authenProvider).MarkUserAsAuthenticatedAsync();


            var authState = await _authenProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                string role = user.FindFirst(ClaimTypes.Role).Value;
                switch (role)
                {
                    case "Admin":
                        _navigate.NavigateTo("/admin/products", false);
                        break;
                    case "Customer":
                        _navigate.NavigateTo("/user/dashboard", false);
                        break;
                    case "Mod":
                        _navigate.NavigateTo("/user/mods", false);
                        break;
                    default:
                        _navigate.NavigateTo("/user/orders", false);
                        break;

                }

            }
        }
        StateHasChanged();
    }
    async Task AuthRegister()
    {
        if (string.IsNullOrEmpty(registerModel.Username) || string.IsNullOrEmpty(registerModel.Password) || string.IsNullOrEmpty(registerModel.ConfirmPassword))
        {
            _noti.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Thông báo :", Detail = "Chưa điền đầy đủ thông tin!", Duration = 4000 });

            return;
        }
        if (string.IsNullOrEmpty(registerModel.RefAdd))
        {
            registerModel.RefAdd = "";
        }
        isLoading = true;
        var respone = await _authServices.RegisterAsync(registerModel);
        isLoading = false;

        Helper.ShowNotification(_noti, respone);
    }
}
