@page "/admin/orders"


@inject IOrderServicesClient _orderServices;
@inject IUserServicesClient _userServices;
@inject ISummaryServicesClient _summaryServices;
@inject IBlazorDownloadFileService _fileDownload
@inject IViaServicesClient _viaServices;
@inject IProxyServicesClient _proxyServices;
@inject NotificationService _noti;
@inject DialogService _dialog

@attribute [Authorize(Roles = "Admin,SuperMod")]

<RadzenContent Container="main">
    <ChildContent>
        <RadzenCard>
            <RadzenRow>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Click="ClickSearch" ButtonStyle="ButtonStyle.Secondary"
                                  IsBusy=@loading Size="ButtonSize.Small" Icon="search" Shade="Shade.Dark" Text="Tìm kiếm">
                    </RadzenButton>

                    <RadzenAutoComplete Change="@FindUserName" @bind-Value=@userName Data=@list_users
                                        TextProperty="UserName" LoadData=@OnLoadUserName />

                    <RadzenDatePicker @bind-Value=@dfrom TimeOnly="false" DateFormat="dd/MM/yyyy">
                        <FooterTemplate>
                            <RadzenButton Click=@(args =>dfrom = Core.Date_GetStartTimeOfDay(DateTime.UtcNow.AddHours(7))) Text="Hôm nay" class="my-3" />
                        </FooterTemplate>
                    </RadzenDatePicker>
                    <RadzenDatePicker @bind-Value=@dto TimeOnly="false" DateFormat="dd/MM/yyyy">
                        <FooterTemplate>
                            <RadzenButton Click=@(args => dto = Core.Date_GetEndTimeOfDay(DateTime.UtcNow.AddHours(7))) Text="Hôm nay" class="my-3" />
                        </FooterTemplate>
                    </RadzenDatePicker>
                </RadzenStack>
            </RadzenRow>

        </RadzenCard>

        <div class="row mt-3">
            <div class="col-lg-12">
                <RadzenCard>
                    <RadzenDataGrid AllowColumnResize="true" FilterMode="FilterMode.Simple"
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.Default"
                                    LogicalFilterOperator="LogicalFilterOperator.Or"
                                    AllowSorting="true" PageSize="10" AllowPaging="true"
                                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="@list_order"
                                    TItem="Order">
                        <Columns>

                            <RadzenDataGridColumn TItem="Order" Property="Id" Filterable="true" Title="Id" Frozen="false" Width="40px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    @item.Id
                                </Template>
                                <FooterTemplate>
                                    Tổng :<b>@String.Format("{0}",Helper.Money_ConvertToString(list_order.Count()))</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="Product.Name" Filterable="true" Title="Tên" Frozen="false" Width="80px" TextAlign="TextAlign.Left">
                                <Template Context="item">
                                    @item.Product.Name
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="Product.Price" Filterable="true" Title="Giá" Frozen="false" Width="70px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    @String.Format("{0}",Helper.Money_ConvertToString(item.Product.Price))
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="Quantity" Filterable="true" Title="Số lượng" Frozen="false" Width="40px" TextAlign="TextAlign.Center" />

                            <RadzenDataGridColumn TItem="Order" Property="TotalPrice" Filterable="true" Title="Tổng" Frozen="false" Width="100px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    @String.Format("{0}",Helper.Money_ConvertToString(item.TotalPrice))
                                </Template>
                                <FooterTemplate>
                                    Tổng :  <b>@String.Format("{0}",Helper.Money_ConvertToString(list_order.Where(c=>c.StatusId==1).Sum(c=>c.TotalPrice)))</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="Order" Property="TotalPrice" Filterable="true" Title="Hoa Hồng(user/mod)" Frozen="false" Width="150px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    @(Helper.Money_ConvertToString(item.TotalPriceIncome) + "/" + Helper.Money_ConvertToString(item.TotalPriceIncomeMod))
                                </Template>
                                <FooterTemplate>
                                    <b>@Helper.Money_ConvertToString(list_order.Where(c=>c.StatusId==1).Sum(c=>c.TotalPriceIncome))</b>/<b>@Helper.Money_ConvertToString(list_order.Where(c=>c.StatusId==1).Sum(c=>c.TotalPriceIncomeMod))</b>
                                </FooterTemplate>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="UserOrderName" Filterable="true" Title="Khách hàng" Frozen="false" Width="100px" TextAlign="TextAlign.Center" />
                            <RadzenDataGridColumn TItem="Order" Property="DateOrder" Filterable="true" Title="Ngày đặt" Frozen="false" Width="160px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    @(Helper.Date_StringTimeConvert(item.DateOrder) + " " + String.Format("({0})", Core.GetTimeMinify(item.DateOrder)))
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="Status.Name" Filterable="true" Title="Trạng thái" Frozen="false" Width="90px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    <RadzenBadge BadgeStyle="@Helper.ToBadgeId(item.StatusId)" class="m-1" Text="@item.Status.Name" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="Value" Filterable="true" Title="Tải về" Width="50px">
                                <Template Context="item">
                                    @if (item.Product.ProductType.Category.Id == 1 || item.Product.ProductType.Category.Id == 3)
                                    {
                                        <RadzenButton Click=@(args => Export(item.Id,item.Product.ProductType.Category.Id)) Icon="get_app" ButtonStyle="ButtonStyle.Primary" />

                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Property="isComplain" Filterable="true" Title="Khiếu nại" Frozen="false" Width="70px" TextAlign="TextAlign.Center">
                                <Template Context="item">
                                    <RadzenBadge BadgeStyle="@(item.isComplain ? BadgeStyle.Secondary : BadgeStyle.Primary)" class="m-1" Text="@(item.isComplain ?"Có" : "Không")" />
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="Order" Context="item" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="50px">
                                <Template Context="item">
                                    <RadzenButton Click="@(()=>OpenDialogOrder(item.Id.ToString()))"
                                                  Icon="edit" ButtonStyle="ButtonStyle.Primary"
                                                  Variant="Variant.Flat" Size="ButtonSize.Medium">
                                    </RadzenButton>
                                    @* <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete"
                                    Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1">
                                    </RadzenButton>*@
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenCard>
            </div>

        </div>

    </ChildContent>
</RadzenContent>
@code {
    List<UserView> list_users = new();

    SearchModel searchModel = new();
    string userId = "";
    string userName = "";
    DateTime dfrom = DateTime.Today.AddDays(-30);
    DateTime dto = DateTime.Today.AddDays(1).Date.AddTicks(-1).AddSeconds(-1);
    List<Order> list_order = new();
    bool loading;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dialog.OnClose += OnCloseDialog;

            list_order = await _orderServices.ListAsync();

            StateHasChanged();
        }
    }
    private async void OnCloseDialog(dynamic result)
    {
        list_order = await _orderServices.ListAsync();
        StateHasChanged();
    }
    async Task OnLoadUserName(LoadDataArgs args)
    {
        list_users = await _userServices.SearchNameAsync(args.Filter);
    }

    async Task FindUserName()
    {
        if (string.IsNullOrEmpty(userName))
        {
            userId = string.Empty;
        }
        else
        {
            var userFind = list_users.FirstOrDefault(c => c.UserName == userName);
            if (userFind != null)
            {
                var user = await _userServices.GetIdAsync(userFind.Id);
                if (user != null)
                {
                    userId = user.Id;
                }
                else
                {
                    _noti.Notify(NotificationSeverity.Error, "Lỗi", "Tìm kiếm user chỉ định lỗi!");
                }
            }
        }
      

    }

    async Task ClickSearch()
    {
        loading = true;
        searchModel.userorderid = userId;
        searchModel.historyid = 0;
        searchModel.from = Core.Date_DateTimeToUnitUnixTimestamp(dfrom);
        searchModel.to = Core.Date_DateTimeToUnitUnixTimestamp(dto);
        list_order = await _orderServices.SearchListAsync(searchModel);
        loading = false;
    }
    private async Task Export(int orderid, int cateId)
    {
        if (cateId == 1)
        {
            string path = "FileProxyOrder_" + Guid.NewGuid().ToString() + ".txt";

            var list_proxy = await _proxyServices.ListOrderIdAsync(orderid);
            if (list_proxy.Count > 0)
            {
                string data = string.Join("\n", list_proxy.Select(proxy => $"{proxy.Name}"));
                byte[] bytes = Encoding.UTF8.GetBytes(data);
                await _fileDownload.DownloadFileAsync(path, bytes);
            }
        }
        else if (cateId == 3)
        {
            string path = "FileViaOrder_" + Guid.NewGuid().ToString() + ".txt";
            var list_via = await _viaServices.ListOrderIdAsync(orderid);
            if (list_via.Count > 0)
            {
                string data = string.Join("\n", list_via.Select(via => $"{via.Username}|{via.Password}|{via.UID}|{via.Mail}|{via.PasswordMail}|{via.TwoFa}"));
                byte[] bytes = Encoding.UTF8.GetBytes(data);
                await _fileDownload.DownloadFileAsync(path, bytes);
            }
        }

    }

    async Task OpenDialogOrder(string orderId)
    {
        await _dialog.OpenAsync<EditOrderDialog>($"Sửa thông tin đơn hàng",
                new Dictionary<string, object>() { { "orderId", orderId } },
                new DialogOptions() { Width = "580px", Height = "700px", Resizable = true, Draggable = true });
    }


}